<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>go on Chaoxin</title>
    <link>http://chaoxin.site/tags/go/</link>
    <description>Recent content in go on Chaoxin</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-ch</language>
    <copyright>©2022 Chaoxin.</copyright>
    <lastBuildDate>Tue, 23 Aug 2022 12:07:24 +0800</lastBuildDate>
    
        <atom:link href="http://chaoxin.site/tags/go/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>初探内存泄露</title>
      <link>http://chaoxin.site/post/memory_leak/</link>
      <pubDate>Tue, 23 Aug 2022 12:07:24 +0800</pubDate>
      
      <guid>http://chaoxin.site/post/memory_leak/</guid>
      <description>&lt;h2 id=&#34;1定义&#34;&gt;1.定义&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;内存泄露 memory leak&lt;/strong&gt; ，是指程序在申请内存后，无法释放已申请的内存空间，一次内存泄露危害可以忽略，但持续累积，内存打满以后，服务将会崩溃。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;监控实例：&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;img  src=&#34;http://rte.weiyun.baidu.com/api/imageDownloadAddress?attachId=60810991bd67426faadc33c895f6c62d&#34;
        alt/&gt;&lt;/p&gt;
&lt;p&gt;正常的内存监控曲线应该稳定在一个区间内起伏。而内存泄露后，可以看到，内存一直都在上涨，在打满后，实例直接崩溃重启，然后又重新打满，又重启，如此循环。&lt;/p&gt;
&lt;h2 id=&#34;2内存泄露的常见原因&#34;&gt;2.内存泄露的常见原因&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;全局变量应该释放的内存没有被释放，全局变量的内存一直增长(正常应该有释放有增长)，如map的kv一直在增加、切片的长度一直在增长&lt;/li&gt;
&lt;li&gt;需要close的变量没有被关闭，如http 链接、mysql链接&lt;/li&gt;
&lt;li&gt;goroutine 泄露，原本应该结束的goroutine没有结束，导致对应的内存无法被释放&lt;/li&gt;
&lt;li&gt;Cgo 相关的内存泄露，在Go里使用Cgo，C代码分配的内存是无法被Go的GC管理的，也无法被pprof追踪&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;3使用pprof&#34;&gt;3.使用pprof&lt;/h2&gt;
&lt;h3 id=&#34;pprof介绍&#34;&gt;pprof介绍&lt;/h3&gt;
&lt;p&gt;pprof是 Go 语言中分析程序运行性能的工具，它能提供各种性能数据：&lt;/p&gt;
&lt;p&gt;&lt;img  src=&#34;http://rte.weiyun.baidu.com/api/imageDownloadAddress?attachId=65677d01b08641699f15b6e9022416a5&#34;
        alt/&gt;&lt;/p&gt;
&lt;h3 id=&#34;建议排查步骤&#34;&gt;建议排查步骤&lt;/h3&gt;
&lt;h4 id=&#34;一检查代码&#34;&gt;一.检查代码&lt;/h4&gt;
&lt;p&gt;查看全局变量是否有可疑逻辑，导致全局变量内存不断增长&lt;/p&gt;
&lt;p&gt;查看是否有没有关闭的&lt;em&gt;&lt;strong&gt;close&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;查看&lt;strong&gt;Cgo&lt;/strong&gt; &lt;strong&gt;相关代码&lt;/strong&gt;，如CString的内存有没有被释放&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;实例：&lt;/strong&gt; 函数使用CString匿名参数，也会导致内存泄露&lt;/p&gt;
&lt;p&gt;问题代码：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;nx&#34;&gt;ret&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;C&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;get_shmdict_value&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;C&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;CString&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;file&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;C&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;CString&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;key&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;content&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;40960&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;errmsg&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1024&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;修复后：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;nx&#34;&gt;cfile&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;C&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;CString&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;file&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;ckey&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;C&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;CString&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;key&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;ret&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;C&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;get_shmdict_value&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;cfile&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;ckey&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;content&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;40960&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;errmsg&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1024&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;C&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;free&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;unsafe&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Pointer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;cfile&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;C&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;free&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;unsafe&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Pointer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;ckey&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;hr&gt;
&lt;p&gt;等等其他可能造成内存泄露的代码&lt;/p&gt;
&lt;h4 id=&#34;二查看goroutine是否泄露&#34;&gt;二.查看goroutine是否泄露&lt;/h4&gt;
&lt;p&gt;压测过程中，使用 &lt;em&gt;&lt;strong&gt;pprof&lt;/strong&gt;&lt;/em&gt; ，访问 （对应的IP和端口）&lt;a href=&#34;http://10.12.205.56:8305/debug/pprof/goroutine?debug=1&#34;target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;http://127.0.0.1:8305/debug/pprof/goroutine?debug=1&lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;查看goroutine数量是否稳定在一个区间：&lt;/p&gt;
&lt;p&gt;如果goroutine不断增长，确定为&lt;em&gt;&lt;strong&gt;goroutine&lt;/strong&gt;&lt;/em&gt;&lt;strong&gt;泄露&lt;/strong&gt;&lt;/p&gt;
&lt;h4 id=&#34;三查看实时内存&#34;&gt;三.查看实时内存&lt;/h4&gt;
&lt;p&gt;压测过程中，当内存达到一个高值以后，使用命令 （对应IP和端口）&lt;/p&gt;
&lt;p&gt;生成实时内存数据：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;go tool pprof http://127.0.0.1:8080/debug/pprof/heap?debug&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;安装并使用graphviz 绘制对应的图形&lt;/p&gt;
&lt;p&gt;使用命令：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;go tool pprof http://127.0.0.1:8080/debug/pprof/heap?debug&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;访问 &lt;a href=&#34;http://127.0.0.1:8090/ui&#34;target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;http://127.0.0.1:8090/ui&lt;/a&gt;
 查看内存路线图和火焰图，帮助定位问题&lt;/p&gt;
&lt;p&gt;火焰图的查看方法为：从上到下为调用链路，左右间距越大标识占用内存越多&lt;/p&gt;
&lt;h4 id=&#34;四查看累积内存&#34;&gt;四.查看累积内存&lt;/h4&gt;
&lt;p&gt;如果实时内存无法定位问题，可以查看累积时间申请的内存，帮助定位问题&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;go tool pprof http://127.0.0.1:8080/debug/pprof/heap -seconds &lt;span class=&#34;m&#34;&gt;30&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;4内存监控&#34;&gt;4.内存监控&lt;/h2&gt;
&lt;p&gt;没有对应的内存监控工具，可以使用命令&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;ps aux &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; grep 对应pid
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;查看&lt;strong&gt;RSS&lt;/strong&gt;查看实时占用内存&lt;/p&gt;
&lt;h2 id=&#34;5查看gc&#34;&gt;5.查看GC&lt;/h2&gt;
&lt;p&gt;查看GC是否正常，使用命令&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;nv&#34;&gt;GODEBUG&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;gctrace&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; go run main.go
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>做笔记的心得体会</title>
      <link>http://chaoxin.site/post/writing_skill/</link>
      <pubDate>Sat, 04 Jun 2022 14:28:33 +0800</pubDate>
      
      <guid>http://chaoxin.site/post/writing_skill/</guid>
      <description>&lt;h2 id=&#34;1前言&#34;&gt;1.前言&lt;/h2&gt;
&lt;p&gt;前前后后试过多种笔记的记录方式，包括博客形式、单纯的markdown形式、有道云笔记的形式等等，最后还是回归博客的形式。&lt;/p&gt;
&lt;p&gt;主要理由是笔记其实大部分情况下是写给自己看的，如果笔记的形式自己都不想去看第二遍的话，那写笔记就显得没有意义。博客的好处是比较定制化、美观，自己更有意愿去看。&lt;/p&gt;
&lt;h2 id=&#34;2排版的心得&#34;&gt;2.排版的心得&lt;/h2&gt;
&lt;p&gt;做笔记的排版是很重要的，直接影响阅读体验。之前有些时候做的笔记第一遍看起来还可以，但是过了一段时间再去看简直惨不忍睹。&lt;/p&gt;
&lt;p&gt;在看了很多优秀的博文、公众号推送等文章后，总结出排版的心得：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;前言是需要的，可以表明写这篇笔记的背景、场景、目的，方便后续阅读和修改。&lt;/li&gt;
&lt;li&gt;不要有太多的代码块，如果有太多的代码应该放在代码库里，而不是放在笔记里&lt;/li&gt;
&lt;li&gt;尽量多用有序列表少用无序列表&lt;/li&gt;
&lt;li&gt;引用里不要放太多内容，最多不要超过3行&lt;/li&gt;
&lt;li&gt;总结在大部分情况下是需要的&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;3内容的心得&#34;&gt;3.内容的心得&lt;/h2&gt;
&lt;p&gt;做笔记的内容是笔记的核心，很多内容其实并不适合做成笔记的形式：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;简单的内容就不要写成笔记了，至少有一些深入才适合做笔记。如语法、Api、基本概念或者一些基本的使用，这些内容不如直接google来的实在&lt;/li&gt;
&lt;li&gt;尽量多画图，流程图、泳道图、思维导图等等，画一张图胜过写10行内容&lt;/li&gt;
&lt;li&gt;不要抄别人的笔记然后略做修改就变成自己的笔记了，浪费时间&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
  </channel>
</rss>